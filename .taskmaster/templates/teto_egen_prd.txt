<context>
# Overview  
테토/에겐 성격 유형 테스트는 사용자가 성향 질문에 답하면서 자신이 "테토형"인지 "에겐형"인지 진단할 수 있는 웹사이트입니다. 테토/에겐 점수 비율을 기반으로 맞춤형 결과를 제공하며, 성별에 따라 다른 질문을 제공합니다. 모바일에서도 최적화된 반응형 디자인으로 접근성을 높입니다.

# Core Features  
## 성별 선택 및 테스트 시작
- 사용자가 성별(남자/여자)을 선택할 수 있는 시작 화면
- 테스트 시작 버튼으로 질문 단계로 이동
- 성별에 따라 다른 질문 세트 제공

## 질문/응답 시스템
- 총 20문항 (초기 버전), 최대 100문항까지 확장 가능
- 성별별 맞춤 질문과 보기 제공
- 각 보기는 테토 또는 에겐 태그를 가짐
- 진행률 표시 기능 (예: 3/20)
- 단일 선택 후 다음 문항 자동 진행

## 결과 산출 및 표시
- 테토/에겐 비율 계산 (예: 테토 65% / 에겐 35%)
- 비율 구간별 맞춤 결과 메시지
- 미리 정의된 JSON 결과 목록에서 매칭
- 결과 설명 및 개인별 조언 제공
- 결과 공유 기능

# User Experience  
## 사용자 페르소나
- 자신의 성격 유형에 관심 있는 일반인
- 모바일 기기를 주로 사용하는 젊은 층
- 간단하고 재미있는 심리 테스트를 원하는 사용자

## 주요 사용자 플로우
1. 웹사이트 접속 → 성별 선택
2. 테스트 시작 → data/questions.json에서 테토/에겐 비율에 맞게 질문 10개 랜덤 출력
3. 결과 확인 → 테토/에겐 비율 및 해석
4. 결과 공유 (선택사항)

## UI/UX 고려사항
- 감성적이고 심플한 디자인
- 테토=레드계열 / 에겐=블루계열 색상 테마
- 모바일 최적화 반응형 디자인
- Web Font 사용 (Noto Sans, Pretendard 등)
</context>

# Technical Architecture  
## 시스템 구성요소
- 프론트엔드: Vanilla JavaScript, HTML5, CSS3
- 데이터 저장: JSON 파일 기반 정적 데이터
- 상태 관리: LocalStorage 활용
- 배포: GitHub Pages

## 데이터 모델
### 질문 데이터 구조 (/data/questions.json)
```json
{
  "id": "q1",
  "male": {
    "text": "질문 내용",
    "options": [
      { "text": "보기1", "tag": "테토" },
      { "text": "보기2", "tag": "에겐" }
    ]
  },
  "female": {
    "text": "질문 내용", 
    "options": [...]
  }
}
```

### 결과 데이터 구조 (/data/results.json)
```json
{
  "id": "teto_dominant",
  "range": [60, 79],
  "title": "테토 우세형",
  "description": "설명...",
  "advice": "조언..."
}
```

## APIs 및 통합
- JSON 데이터 fetch API
- LocalStorage API for 답변 저장
- SEO 최적화를 위한 메타 태그 설정

## 인프라 요구사항
- GitHub Pages 호스팅
- 서버리스 아키텍처
- CDN을 통한 정적 자원 배포

# Development Roadmap  
## MVP 요구사항 (Phase 1)
- 기본 HTML 구조 및 반응형 CSS 스타일링
- 성별 선택 UI 구현
- 질문 10개 데이터 에겐/테토 비율에 맞게 자동 랜덤 선택 및 로딩 시스템
- 답변 수집 및 점수 계산 로직
- 결과 화면 및 기본 결과 데이터 (5-7개 유형)
- GitHub Pages 배포 설정

## Phase 2 개선사항
- 질문 수 확장 (최대 100문항)
- 결과 유형별 캐릭터/이미지 추가
- SNS 공유 기능 구현
- SEO 최적화 강화

## Phase 3 고급 기능
- LLM을 활용한 질문 자동 생성
- 질문 랜덤화 기능
- 사용자 커스텀 질문 기능
- Google AdSense 광고 삽입

# Logical Dependency Chain
## 기초 단계 (우선 구축)
1. 프로젝트 구조 설정 및 기본 HTML/CSS 프레임워크
2. 질문/결과 JSON 데이터 구조 정의
3. 성별 선택 UI (첫 번째 사용자 접점)

## 핵심 기능 구현
4. 질문 표시 및 답변 수집 시스템
5. 진행률 표시 및 네비게이션
6. 점수 계산 및 결과 매칭 로직

## 완성 단계
7. 결과 화면 디자인 및 데이터 연동
8. 모바일 최적화 및 반응형 개선
9. SEO 최적화 및 배포 설정

각 단계는 독립적으로 테스트 가능하며, 이전 단계의 완성을 전제로 다음 단계를 진행할 수 있도록 설계되었습니다.

# Risks and Mitigations  
## 기술적 도전과제
- **위험**: JSON 데이터 로딩 실패 또는 파싱 에러
- **완화**: 에러 핸들링 및 폴백 메커니즘 구현

- **위험**: 모바일 브라우저 호환성 문제
- **완화**: 크로스 브라우저 테스트 및 폴리필 적용

## MVP 범위 설정
- **위험**: 기능 과다로 인한 개발 지연
- **완화**: 20문항, 기본 결과 유형만으로 MVP 제한

- **위험**: 사용자 경험 부족
- **완화**: 간단하고 직관적인 UI/UX에 집중

## 리소스 제약
- **위험**: 질문 컨텐츠 제작의 어려움
- **완화**: 간단한 20문항으로 시작, 점진적 확장

- **위험**: 디자인 리소스 부족
- **완화**: 미니멀 디자인 원칙 적용, CSS 프레임워크 활용

# Appendix  
## 기술 명세
- HTML5, CSS3, ES6+ JavaScript
- 모바일 퍼스트 반응형 디자인
- GitHub Pages 정적 호스팅
- JSON 기반 데이터 관리

## 성능 목표
- 페이지 로딩 시간 < 3초
- 모바일 최적화 점수 90+ (Lighthouse 기준)
- 접근성 준수 (WCAG 2.1 AA 수준)

## 확장성 고려사항
- 질문 데이터 구조의 확장성
- 다국어 지원 가능성
- 추가 성격 유형 지원 가능성